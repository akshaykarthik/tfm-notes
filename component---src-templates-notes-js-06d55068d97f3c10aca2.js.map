{"version":3,"file":"component---src-templates-notes-js-06d55068d97f3c10aca2.js","mappings":"uMAiBA,EAhBc,SAAC,GAA2C,IAAzCA,EAAwC,EAAxCA,YAAaC,EAA2B,EAA3BA,WACxBC,GCFS,SAAuCC,EAAQC,GAC5D,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IAEIE,EAAKC,EAFLC,EAAS,GACTC,EAAaC,OAAOC,KAAKP,GAG7B,IAAKG,EAAI,EAAGA,EAAIE,EAAWG,OAAQL,IACjCD,EAAMG,EAAWF,GACbF,EAASQ,QAAQP,IAAQ,IAC7BE,EAAOF,GAAOF,EAAOE,IDRgC,MACvCL,EAAYa,QAAQ,YAAa,YACjD,OACE,uBAAKC,UAAU,SACb,0BACEC,IAAKb,EACLc,MAAOf,EACPgB,MAAM,0EACNC,YAAY,IACZC,sBAAsB,OACtBC,mBAAmB,OACnBC,iBAAe,M,UERR,SAASC,EAAT,GAA0B,IACjCC,EADgC,EAARC,KACZC,IACdC,EAAOH,EAAKI,QAEhB,OADAD,EAAOA,EAAKb,QAAQ,mBAAoB,IAEtC,2BACE,gBAAC,EAAAe,KAAD,CAAMC,GAAG,KAAT,QACA,0BAAKN,EAAKO,YAAYC,MACtB,mCAAWR,EAAKO,YAAYE,MAC5B,uCAAeT,EAAKO,YAAYG,UAChC,qCAAaV,EAAKO,YAAYI,QAC9B,sCAAcX,EAAKO,YAAYK,SAC9BZ,EAAKO,YAAYF,MAAQ,gBAAC,EAAD,CAAO5B,YAAauB,EAAKO,YAAYF,OAC/D,uBAAKQ,wBAAyB,CAAEC,OAAQX","sources":["webpack://tfm-notes/./src/components/Video.js","webpack://tfm-notes/./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","webpack://tfm-notes/./src/templates/notes.js"],"sourcesContent":["import React from \"react\";\nconst Video = ({ videoSrcURL, videoTitle, ...props }) => {\n  let sourceUrl = videoSrcURL.replace(\"/watch?v=\", \"/embed/\");\n  return (\n    <div className=\"video\">\n      <iframe\n        src={sourceUrl}\n        title={videoTitle}\n        allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n        frameBorder=\"0\"\n        webkitallowfullscreen=\"true\"\n        mozallowfullscreen=\"true\"\n        allowFullScreen\n      />\n    </div>\n  );\n};\nexport default Video;\n","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import React from \"react\";\nimport Video from \"../components/Video\";\nimport { graphql, Link } from \"gatsby\";\n\nexport default function Notes({ data }) {\n  const post = data.mdx;\n  let body = post.rawBody;\n  body = body.replace(/---(.|\\n)*?---/im, \"\");\n  return (\n    <div>\n      <Link to=\"/\">Home</Link>\n      <h1>{post.frontmatter.Song}</h1>\n      <h2>Film: {post.frontmatter.Film}</h2>\n      <h3>Composer: {post.frontmatter.Composer}</h3>\n      <h3>Lyrics: {post.frontmatter.Lyrics}</h3>\n      <h3>Artists: {post.frontmatter.Artists}</h3>\n      {post.frontmatter.Link && <Video videoSrcURL={post.frontmatter.Link} />}\n      <pre dangerouslySetInnerHTML={{ __html: body }} />\n    </div>\n  );\n}\n\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      id\n      slug\n      frontmatter {\n        Song\n        Film\n        Composer\n        Lyrics\n        Artists\n        Link\n      }\n      rawBody\n    }\n  }\n`;\n"],"names":["videoSrcURL","videoTitle","sourceUrl","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","replace","className","src","title","allow","frameBorder","webkitallowfullscreen","mozallowfullscreen","allowFullScreen","Notes","post","data","mdx","body","rawBody","Link","to","frontmatter","Song","Film","Composer","Lyrics","Artists","dangerouslySetInnerHTML","__html"],"sourceRoot":""}